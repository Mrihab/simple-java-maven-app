pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    
    //
    stages {
        //build angular 
         stage(' Angular Build') {
        milestone()
        sh 'ng build --prod --aot --sm --progress=false'
    }
        
        
          stage('Archive') {
        sh 'tar -cvzf dist.tar.gz --strip-components=1 dist'
        archive 'dist.tar.gz'
    }
     
        
        //test angular 
        
         stage('Test') {
        withEnv(["CHROME_BIN=/usr/bin/chromium-browser"]) {
          sh 'ng test --progress=false --watch false'
        }
        junit '**/test-results.xml'
    
         
     }  
     
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
        
        //git checkout 
        stage(' git Checkout') {
             steps {
               git credentialsId: '39c3af6a-711a-4ff5-8b30-61e3ee86aae3'', url: 'http://jenkins@10.1.1.70/root/SNIT-BE.git'
        }
    }
       
        //code quality analysis 
        
        stage("build & SonarQube analysis") {
           agent any
            steps {
                //go to sonar plugin and identify the name
             withSonarQubeEnv('My SonarQube Server') {
                  
               sonar-scanner.bat -D"sonar.projectKey=Test" -D"sonar.sources=." -D"sonar.host.url=http://192.168.159.132:9000" -D"sonar.login=d2c3032f73bf6ed9ff3e72eef42af7dd575b288b"
                 }
           }
         }
          stage("Quality Gate") {
          steps {
             timeout(time: 1, unit: 'HOURS') {
               waitForQualityGate abortPipeline: false
                }
            }
          }
        
        
        //deploy to server a faire  
         stage(' Deploy to server ') {
            
            sshagent(['gitssh']) {
               sh 'scp -o StrictHostKeyChecking=no target (pick the war file file from local machien ) (put it on server @)
                     }
               }
        
        
        //Deploy artifacts to Nexus
        
    
      
        
          stages {
        stage("clone code") {
            steps {
                script {
                    // Let's clone the source
                    git 'http://jenkins@10.1.1.70/root/SNIT-BE.git';
                }
            }
        }
              
              
        stage(' Angular Build') {
        milestone()
        sh 'ng build --prod --aot --sm --progress=false'
    }
              
         //publish angular artifact to nexus
              
           
              stage('publish artifact to nexus') {
              
              
              nexusArtifactUploader(
    nexusVersion: 'nexus3',
    protocol: 'http',
    nexusUrl: 'http://192.168.159.132:8081/nexus',
    groupId: 'org.springframework.boot',
    version: version,
    repository: 'gfi-nexus',
    credentialsId: 'nexus',
    artifacts: [
        [artifactId: projectName,
         classifier: '',
         file: 'my-service-' + version + '.jar',
         type: 'jar']
    ]
 )
              }         
              
              
              
              
              
              
              
              
       //docker image tagging 
              
          environnement { 
    Registry = "rihab18 / pipeline-test" 
              //creercred dans jenkins pour docker hub 
    RegistryCredential = 'dockerhub' 
    dockerImage = '' 
  } 
              
              
       stage(' git clone project ') {
             steps {
                 //cloner repo , put url git to the project 
               git  'http://github.com/Mrihab/simple-java-maven-app'
        }
    }        
              
          // angular build 
              
    stage('Build') {
        milestone()
        sh 'ng build --prod --aot --sm --progress=false'
    }
              
     // angular test
               
     stage('Test') {
        withEnv(["CHROME_BIN=/usr/bin/chromium-browser"]) {
          sh 'ng test --progress=false --watch false'
        }
        junit '**/test-results.xml'
    
         
     }  
              
               stage (' Building image') { 
      étapes {
        script { 
          dockerImage = docker.build Registry + ": $ BUILD_NUMBER" 
        } 
      } 
    }  
          
               stage ('Deploy Image') { 
      steps { 
         script { 
            docker.withRegistry ('', registryCredential) { 
            dockerImage.push () 
          } 
        } 
      } 
    } 
               
      stage ( 'Supprimer l'image docker inutilisée') { 
      steps { 
        sh "Registre docker rmi $: $ BUILD_NUMBER" 
      } 
    }          
      
             
             
             //monitoring with grafana 
             
              stage ( 'Monitoring') { 
    
                  
                  echo "Creating annotation in Grafana with tags: ${tags} and description: ${text} ..."

withCredentials([[$class: 'StringBinding', credentialsId: 'GRAFANA_APIKEY', variable: 'GRAFANA_APIKEY']]) {
	apiKey = env.GRAFANA_APIKEY
	httpRequest(
		acceptType: 'APPLICATION_JSON',
		consoleLogResponseBody: false,
		contentType: 'APPLICATION_JSON',
		customHeaders: [[maskValue: true, name: 'Authorization', value: 'Bearer ' + apiKey]],
		httpMode: 'POST',
		requestBody: toJson(payload),
		responseHandle: 'NONE',
		url: grafana + '/api/annotations',
		validResponseCodes: '200'
	)
}
                  
                  
    }   
             
        
             //get the current tag 
             
             sh(returnStdout: true, script: "git tag --sort version:refname | tail -1").trim()
             
             
        
    }
}
