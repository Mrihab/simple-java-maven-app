pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    stages {
        stage('Build') {
        
            steps {
                sh 'mvn -B -DskipTests clean package'
                
            }
        }
     
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
        stage(' git Checkout') {
             steps {
               git credentialsId: 'cloudR123', url: 'http://github.com/Mrihab/simple-java-maven-app'
        }
    }
       
        stage("build & SonarQube analysis") {
           agent any
            steps {
             withSonarQubeEnv('My SonarQube Server') {
                  
                sh 'mvn sonar:sonar \
                  -Dsonar.projectKey=Test \
                  -Dsonar.host.url=http://192.168.159.132:9000 \
                  -Dsonar.login=be1767e5277e08e91f5eb1fa5a93f19a00e9346f'
                 }
           }
         }
          stage("Quality Gate") {
          steps {
             timeout(time: 1, unit: 'HOURS') {
               waitForQualityGate abortPipeline: false
                }
            }
          }
        
        //deploy to server 
         stage(' Deploy to server ') {
            
            sshagent(['gitssh']) {
               sh 'scp -o StrictHostKeyChecking=no target (pick the war file file from local machien ) (put it on server @)
                     }
               }
        
        
        //Deploy artifacts to Nexus
        
        tools {
       
        maven "Maven 3.6.0"
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        // Where  Nexus is running
        NEXUS_URL = "http://192.168.159.132:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "gfi-nexus"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus"
    }
      
        
          stages {
        stage("clone code") {
            steps {
                script {
                    // Let's clone the source
                    git 'https://github.com/danielalejandrohc/cargotracker.git';
                }
            }
        }
        stage("mvn build") {
            steps {
                script {
                   
                    sh "mvn package -DskipTests=true"
                }
            }
        }
              
         
        stage("publish to nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            //nexus version
                            nexusVersion: nexus3,
                            ///nexus protocol
                            protocol: http,
                            nexusUrl: http://192.168.159.132:8081,
                            groupId: pom.groupId,
                            version: pom.version,
                            repo nexus
                            repository: gfi-nexus,
                            credentialsId: nexus,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        
       //docker image tagging 
              
          environnement { 
    Registry = "rihab18 / pipeline-test" 
              //creercred dans jenkins pour docker hub 
    RegistryCredential = 'dockerhub' 
    dockerImage = '' 
  } 
              
              
       stage(' git clone project ') {
             steps {
                 //cloner repo , put url git to the project 
               git  'http://github.com/Mrihab/simple-java-maven-app'
        }
    }        
              
           stages {
        stage('Build') {
        
            steps {
                sh 'mvn -B -DskipTests clean package'
                
            }
        }
     
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }    
              
               stage (' Building image') { 
      étapes {
        script { 
          dockerImage = docker.build Registry + ": $ BUILD_NUMBER" 
        } 
      } 
    }  
          
               stage ('Deploy Image') { 
      steps { 
         script { 
            docker.withRegistry ('', registryCredential) { 
            dockerImage.push () 
          } 
        } 
      } 
    } 
               
      stage ( 'Supprimer l'image docker inutilisée') { 
      steps { 
        sh "Registre docker rmi $: $ BUILD_NUMBER" 
      } 
    }          
      
             
             
             //
             
             
        
    }
}
